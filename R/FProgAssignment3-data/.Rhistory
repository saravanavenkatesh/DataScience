R.version.string
install.packages("swirl")
packageVersion("swirl")
install_from_swirl("R Programming")
install_from_swirl("R Programming")
install_from_swirl("R Programming")
install_from_swirl
help(install_from_swirl")")
help("install_from_swirl")
??install_from_swirl
library(devtools)
swirl()
library("swirl")
install_from_swirl("R Programming")
swirl()
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,111)
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
getwd()
ls()
x<-9
ls()
dir()
?list.files
args(list.files())
args(list.files)
old.dir<-getwd()
dir.create("testdir")
setwd("C:\D\Repos\DataScience\R\testdir")
setwd("C:\\D\\Repos\\DataScience\\R\\testdir")
setwd("testdir")
getwd()
setwd("C:/D/Repos/DataScience/R")
setwd("testdir")
file.create("mytest.R")
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R"")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create(file.path("testdir2","testdir3"))
dir.create(file.path("testdir2","testdir3"),recursive=TRUE)
setwd(old.dir)
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect=c(0.5,55,-10,6)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect >= 6
my_char<-c("My","name","is")
my_char
paste(my_char, collapse = " ")
my_name<-c(my_char, "saravana")
my_name
paste(my_name,collapse = " "!)
paste(my_name,collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3,C("X","Y","Z"),sep="")
paste(1:3,C("X","Y","Z"),sep="")
val<-C("X", "Y", "Z")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS, 1:4, sep = "-")
x<-c(44, NA, 5, NA
)
x*3
y <- rnorm(1000)
z<-rep(NA,1000)
my_data <- sample(c(y, z), 100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
swirl()
library(swirl)
swirl()
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar =
| 2, norf = NA)
vect <- c(foo = 11, bar =2, norf = NA)
vect
names(vect)
vec2<-c(11,2,NA)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(1:20,nrow=4,ncol = 5)
identical(my_matrix,my_matrix2)
patients<-c("Bill", "Gina", "Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames<-c( "patient", "age","weight", "bp", "rating", "test")
colnames(my_data)<-cnames
my_data
library(swirl)
swirl()
TRUE==TRUE
(FALSE==TRUE)
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
5!=7
!(5==7)
FALSE&FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE).
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE((6>4))
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(C(4,5,10))
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evalauate(function(x){x[1]},c(8, 4, 0))
evaluate(function(x){x[1]},c(8, 4, 0))
evaluate(function(x){x[length(x)]},c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
telegram("good","morning")
submit()
mad_libs("hi","hi","hi")
submit()
"I"%p%"love ,"%p% "R!"
"I"%p%"love"%p% "R!"
library(swirl)
swirl
swirl()
swirl()
head(flags)
dim(flags)
class(flags)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect<-sapply(flag,mean)
cls_vect<-sapply(flags,mean)
cls_vect<-sapply(flags,class)
class(cls_vect)
sums(flags$orange)
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals<-lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
unique_vals<-lapply(flags,unique)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
source('C:/D/Repos/DataScience/R/inversematrix.R')
mat<-matrix(c(1,2,3,4),nrow = 2,ncol = 2)
CM<-CreateMatrix(mat)
TransposeMatrix(CM)
source('C:/D/Repos/DataScience/R/inversematrix.R')
mat<-matrix(c(1,2,3,4),nrow = 2,ncol = 2)
CM<-CreateMatrix(mat)
TransposeMatrix(CM)
CM<-CreateMatrix(mat)
source('C:/D/Repos/DataScience/R/inversematrix.R')
mat<-matrix(c(1,2,3,4),nrow = 2,ncol = 2)
CM<-CreateMatrix(mat)
TransposeMatrix(CM)
TransposeMatrix(CM)
source('C:/D/Repos/DataScience/R/inversematrix.R')
mat<-matrix(c(1,2,3,4),nrow = 2,ncol = 2)
CM<-CreateMatrix(mat)
TransposeMatrix(CM)
TransposeMatrix(CM)
TransposeMatrix(CM)
mattrans<-func$gettranspose()
source('C:/D/Repos/DataScience/R/inversematrix.R')
mat<-matrix(c(1,2,3,4),nrow = 2,ncol = 2)
CM<-CreateMatrix(mat)
TransposeMatrix(CM)
View(TransposeMatrix)
TransposeMatrix(CM)
mat<-matrix(c(1,2,3,4),nrow = 2,ncol = 2)
CM<-CreateMatrix(mat)
TransposeMatrix(CM)
source('C:/D/Repos/DataScience/R/inversematrix.R')
mat<-matrix(c(1,2,3,4),nrow = 2,ncol = 2)
CM<-CreateMatrix(mat)
TransposeMatrix(CM)
TransposeMatrix(CM)
source('C:/D/Repos/DataScience/R/inversematrix.R')
mat<-matrix(c(1,2,3,4),nrow = 2,ncol = 2)
CM<-CreateMatrix(mat)
TransposeMatrix(CM)
source('C:/D/Repos/DataScience/R/inversematrix.R')
mat<-matrix(c(1,2,3,4),nrow = 2,ncol = 2)
CM<-CreateMatrix(mat)
TransposeMatrix(CM)
CM
source('C:/D/Repos/DataScience/R/inversematrix.R')
mat<-matrix(c(1,2,3,4),nrow = 2,ncol = 2)
CM<-CreateMatrix(mat)
TransposeMatrix(CM)
source('C:/D/Repos/DataScience/R/inversematrix.R')
mat<-matrix(c(1,2,3,4),nrow = 2,ncol = 2)
CM<-CreateMatrix(mat)
TransposeMatrix(CM)
TransposeMatrix(CM)
source('C:/D/Repos/DataScience/R/inversematrix.R')
mat<-matrix(c(1,2,3,4),nrow = 2,ncol = 2)
CM<-CreateMatrix(mat)
TransposeMatrix(CM)
source('C:/D/Repos/DataScience/R/inversematrix.R')
CM<-CreateMatrix(mat)
TransposeMatrix(CM)
TransposeMatrix(CM)
source('C:/D/Repos/DataScience/R/PlotRate.R')
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("pneumonia", "worst"), 3)
num_temp
num_temp
num_temp
num_temp
length(outcome_state$Hospital.Name)
length(outcome_state$City
)
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
source('C:/D/Repos/DataScience/R/PlotRate.R')
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
as.character(subset(r, State == "HI")$hospital)
rankall("heart attack", 4)
as.character(subset(r,State == "HI")$hospital)
subset(r,State == "HI")$hospital
subset(rankall("heart attack", 4),State == "HI")$hospital
rankall("pneumonia", "worst")
rankall("heart failure", 10)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$Hospital.Name)
as.character(subset(r, State == "NV")$Hospital.Name)
rankall("heart failure", 10)
source('C:/D/Repos/DataScience/R/PlotRate.R')
rankall("heart failure", 10)
names(result)
rankall("heart failure", 10)
debugSource('C:/D/Repos/DataScience/R/PlotRate.R')
rankall("heart failure", 10)
source('C:/D/Repos/DataScience/R/PlotRate.R')
source('C:/D/Repos/DataScience/R/PlotRate.R')
rankall("heart failure", 10)
rankall("heart failure", 10)
names(result)
names(result)
names(result)
names(result)
source('C:/D/Repos/DataScience/R/PlotRate.R')
rankall("heart failure", 10)
source('C:/D/Repos/DataScience/R/PlotRate.R')
rankall("heart failure", 10)
source('C:/D/Repos/DataScience/R/PlotRate.R')
rankall("heart failure", 10)
